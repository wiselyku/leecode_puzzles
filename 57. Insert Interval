###### tags: `Lecode Questions`

# 57. Insert Interval

https://leetcode.com/problems/insert-interval/

Basic Idea: First do binary search for the newInterval[0] and newInterval[1].  Then, merge the overlaps and pop the intervals that have been merged. Finally, push the merged interval to the intervals in the correct position.


```python=
class Solution:
    def insert(self, intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:
        if len(intervals) == 0:
            return [newInterval]
        elif len(intervals) == 1:
            if intervals[0][1] < newInterval[0]:
                intervals.append(newInterval)
            elif intervals[0][0] <= newInterval[0] and intervals[0][1] <= newInterval[1]:
                intervals[0][1] = newInterval[1]
            elif intervals[0][0] > newInterval[1]:
                intervals.insert(0,newInterval)
            elif intervals[0][0] >= newInterval[0] and intervals[0][1] >= newInterval[1]:
                intervals[0][0] = newInterval[0]
            elif intervals[0][0] >= newInterval[0] and intervals[0][1] <= newInterval[1]:
                intervals[0][0] = newInterval[0]
                intervals[0][1] = newInterval[1]
                
            return intervals
        
        left = 0 
        right = len(intervals) - 1
        index = -1
        while left<=right:
            mid = math.floor((left+right)/2)
            if intervals[mid][0] < newInterval[0]:
                index = mid
                left = mid + 1
            else:
                right = mid -1
        
        left = 0 
        right = len(intervals) - 1
        index2 = -1
        while left<=right:
            mid = math.floor((left+right)/2)
            if intervals[mid][1] < newInterval[1]:
                index2 = mid
                left = mid + 1
            else:
                right = mid -1
    

        if index != -1 and index2 != -1:
            if index != len(intervals)-1 and index2 != len(intervals)-1:
                interval = [-1,-1]
                temp = index
                if newInterval[0] <= intervals[index][1] and newInterval[1] < intervals[index2+1][0]:
                    interval[0] = intervals[index][0]
                    interval[1] = newInterval[1]
                    
                elif newInterval[0] <= intervals[index][1] and newInterval[1] >= intervals[index2+1][0]:
                    interval[0] = intervals[index][0]
                    interval[1] = intervals[index2+1][1]
                    index2 = index2 + 1
                    
                elif newInterval[0] > intervals[index][1] and newInterval[1] < intervals[index2+1][0]:
                    interval[0] = newInterval[0]
                    interval[1] = newInterval[1]
                    temp = index+1
                    
                elif newInterval[0] > intervals[index][1] and newInterval[1] >= intervals[index2+1][0]:
                    interval[0] = newInterval[0]
                    interval[1] = intervals[index2+1][1]
                    temp = index + 1
                    index2 = index2 + 1
                    
                pop_index = temp                    
                while temp <= index2:
                    intervals.pop(pop_index)
                    temp = temp + 1
            
                intervals.insert(pop_index,interval)
                return intervals
            elif index == len(intervals)-1 and index2 == len(intervals)-1:
                if newInterval[0] > intervals[len(intervals)-1][1]:
                    intervals.append(newInterval)
                    return intervals
                elif newInterval[0] <= intervals[len(intervals)-1][1]:
                    intervals[len(intervals)-1][1] = newInterval[1]
                    return intervals
            elif index == len(intervals)-1 and index2 != len(intervals)-1:
                return intervals
            else:
                temp = index
                interval = [-1,-1]
                if newInterval[0] <= intervals[index][1]:
                    interval[0] = intervals[index][0]
                    interval[1] = newInterval[1]
                elif newInterval[0] > intervals[index][1]:
                    interval[0] = newInterval[0]
                    interval[1] = newInterval[1]
                    temp = index + 1
                
                pop_index = temp
                while temp <= index2:
                    intervals.pop(pop_index)
                    temp = temp + 1
                    
                intervals.insert(pop_index,interval)
                return intervals         
                
        elif index == -1 and index2 == -1:
            if intervals[0][0] < newInterval[1]:
                intervals[0][0] = newInterval[0]
            else:
                intervals.insert(0,newInterval)
                
            return intervals
        elif index == -1 and index2 != -1:
            if index2 != len(intervals)-1:
                interval = [-1,-1]
                interval[0] = newInterval[0]
                if newInterval[1] < intervals[index2+1][0]:
                    interval[1] = newInterval[1]
                elif newInterval[1] >= intervals[index2+1][0]:
                    interval[1] = intervals[index2+1][1]
                    index2 = index2+1
        
                temp = 0
                while temp <= index2:

                    intervals.pop(0)
                    temp = temp + 1
            
                intervals.insert(0,interval)
                return intervals
            else:
                return [newInterval]
        else:
            return intervals
```
